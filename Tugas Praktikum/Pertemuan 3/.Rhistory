#PACKAGES
#install.packages("dLagM") #install jika belum ada
#install.packages("dynlm") #install jika belum ada
#install.packages("MLmetrics") #install jika belum ada
library(dLagM)
library(dynlm)
library(MLmetrics)
library(lmtest)
library(car)
```{r, echo=FALSE,warning=F,message=F}
#PACKAGES
#install.packages("dLagM") #install jika belum ada
#install.packages("dynlm") #install jika belum ada
#install.packages("MLmetrics") #install jika belum ada
library(dLagM)
library(dynlm)
library(MLmetrics)
library(lmtest)
library(car)
data <- rio::import("https://raw.githubusercontent.com/maheeeb/G1401221031-Mahib-1/master/data/tomtom_20_27.csv?token=GHSAT0AAAAAACWKYJN6A6SJQ723KRN7XNIUZWW5GJA")
dt <- rio::import("https://raw.githubusercontent.com/maheeeb/G1401221031-Mahib-1/master/data/tomtom_20_27.csv?token=GHSAT0AAAAAACWKYJN6A6SJQ723KRN7XNIUZWW5GJA")
data <- rio::import("https://raw.githubusercontent.com/maheeeb/G1401221031-Mahib-1/master/data/tomtom_20_27.csv?token=GHSAT0AAAAAACWKYJN6A6SJQ723KRN7XNIUZWW5GJA")
str(data)
data
data <- data %>% select(time,`Travel Time`,`Jams Delay`)
library(dplyr)
data <- data %>% select(time,`Travel Time`,`Jams Delay`)
dim(data)
168*0.8
#SPLIT DATA
train<-data[1:134,]
test<-data[135:168,]
#data time series
train.ts<-ts(train)
test.ts<-ts(test)
data.ts<-ts(data)
names(data) <- c("time","travel_time","jams_delay")
#SPLIT DATA
train<-data[1:134,]
test<-data[135:168,]
#data time series
train.ts<-ts(train)
test.ts<-ts(test)
data.ts<-ts(data)
#MODEL KOYCK
model.koyck <- koyckDlm(x = train$jams_delay, y = train$travel_time)
summary(model.koyck)
#MODEL KOYCK
model.koyck <- koyckDlm(x = train$jams_delay, y = train$travel_time)
summary(model.koyck)
AIC(model.koyck)
BIC(model.koyck)
fore.koyck <- forecast(model = model.koyck, x=test$Xt, h=5)
fore.koyck <- forecast(model = model.koyck, x=test$jams_delay, h=5)
fore.koyck
mape.koyck <- MAPE(fore.koyck$forecasts, test$Yt)
fore.koyck <- forecast(model = model.koyck, x=test$jams_delay, h=5)
fore.koyck
mape.koyck <- MAPE(fore.koyck$forecasts, test$Yt)
#akurasi data training
GoF(model.koyck)
model.dlm <- dlm(x = train$jams_delay,y = train$travel_time , q = 2)
summary(model.dlm)
fore.dlm <- forecast(model = model.dlm, x=test$jams_delay, h=5)
fore.dlm
mape.dlm <- MAPE(fore.dlm$forecasts, test$Yt)
#akurasi data training
GoF(model.dlm)
mape.dlm
#akurasi data training
GoF(model.dlm)
mape.koyck <- MAPE(fore.koyck$forecasts, test$travel_delay)
mape.koyck
mape.koyck <- MAPE(fore.koyck$forecasts, test$travel_time)
fore.koyck <- forecast(model = model.koyck, x=test$jams_delay, h=5)
fore.koyck
mape.koyck <- MAPE(fore.koyck$forecasts, test$travel_time)
fore.koyck <- forecast(model = model.koyck, x=test$jams_delay, h=dim(test)[1])
fore.koyck
mape.koyck <- MAPE(fore.koyck$forecasts, test$travel_time)
mape.koyck
#akurasi data training
GoF(model.koyck)
fore.dlm <- forecast(model = model.dlm, x=test$jams_delay, h=dim(test)[1])
fore.dlm
mape.dlm <- MAPE(fore.dlm$forecasts, test$travel_time)
mape.dlm
#akurasi data training
GoF(model.dlm)
#penentuan lag optimum
finiteDLMauto(formula = travel_time ~ jams_delay,
data = data.frame(train), q.min = 1, q.max = 7,
model.type = "dlm", error.type = "AIC", trace = FALSE)
#penentuan lag optimum
finiteDLMauto(formula = travel_time ~ jams_delay,
data = data.frame(train), q.min = 1, q.max = 10,
model.type = "dlm", error.type = "AIC", trace = FALSE)
#penentuan lag optimum
finiteDLMauto(formula = travel_time ~ jams_delay,
data = data.frame(train), q.min = 1, q.max = 14,
model.type = "dlm", error.type = "AIC", trace = FALSE)
#penentuan lag optimum
finiteDLMauto(formula = travel_time ~ jams_delay,
data = data.frame(train), q.min = 1, q.max = 7,
model.type = "dlm", error.type = "AIC", trace = FALSE)
#model dlm dengan lag optimum
model.dlm2 <- dlm(x = train$delay_time,y = train$travel_time , q = 7)
train
#model dlm dengan lag optimum
model.dlm2 <- dlm(x = train$jams_delay,y = train$travel_time , q = 7)
summary(model.dlm2)
#peramalan dan akurasi
fore.dlm2 <- forecast(model = model.dlm2, x=test$Xt, h=dim(test)[1])
#peramalan dan akurasi
fore.dlm2 <- forecast(model = model.dlm2, x=test$jams_delay, h=dim(test)[1])
mape.dlm2<- MAPE(fore.dlm2$forecasts, test$travel_time)
#akurasi data training
GoF(model.dlm2)
mape.dlm2
model.ardl <- ardlDlm(formula = travel_time ~ jams_delay,
data = train,p = 1 , q = 1)
summary(model.ardl)
AIC(model.ardl)
BIC(model.ardl)
summary(model.ardl)
fore.ardl <- forecast(model = model.ardl, x=test$Xt, h=dim(test)[1])
fore.ardl <- forecast(model = model.ardl, x=test$jams_delay, h=dim(test)[1])
fore.ardl
dim(test)
mape.ardl <- MAPE(fore.ardl$forecasts, test$travel_time)
mape.ardl
#akurasi data training
GoF(model.ardl)
mape.ardl
#penentuan lag optimum
model.ardl.opt <- ardlBoundOrders(data = data.frame(data), ic = "AIC",
formula = travel_time ~ jams_delay )
min_p=c()
for(i in 1:6){
min_p[i]=min(model.ardl.opt$Stat.table[[i]])
}
q_opt=which(min_p==min(min_p, na.rm = TRUE))
p_opt=which(model.ardl.opt$Stat.table[[q_opt]] ==
min(model.ardl.opt$Stat.table[[q_opt]], na.rm = TRUE))
data.frame("q_optimum" = q_opt, "p_optimum" = p_opt,
"AIC"=model.ardl.opt$min.Stat)
akurasi <- matrix(c(mape.koyck, mape.dlm, mape.dlm2, mape.ardl))
row.names(akurasi)<- c("Koyck","DLM 1","DLM 2","Autoregressive")
colnames(akurasi) <- c("MAPE")
akurasi
par(mfrow=c(1,1))
plot(test$Xt, test$Yt, type="b", col="black", ylim=c(120,250))
par(mfrow=c(1,1))
plot(test$jams_delay, test$travel_time, type="b", col="black", ylim=c(120,250))
points(test$jams_delay, fore.koyck$forecasts,col="red")
lines(test$jams_delay, fore.koyck$forecasts,col="red")
points(test$jams_delay, fore.dlm$forecasts,col="blue")
lines(test$jams_delay, fore.dlm$forecasts,col="blue")
points(test$jams_delay, fore.dlm2$forecasts,col="orange")
lines(test$jams_delay, fore.dlm2$forecasts,col="orange")
points(test$jams_delay, fore.ardl$forecasts,col="green")
lines(test$jams_delay, fore.ardl$forecasts,col="green")
legend("topleft",c("aktual", "koyck","DLM 1","DLM 2", "autoregressive"), lty=1, col=c("black","red","blue","orange","green"), cex=0.8)
par(mfrow=c(1,1))
plot(test$jams_delay, test$travel_time, type="b", col="black")
points(test$jams_delay, fore.koyck$forecasts,col="red")
lines(test$jams_delay, fore.koyck$forecasts,col="red")
points(test$jams_delay, fore.dlm$forecasts,col="blue")
lines(test$jams_delay, fore.dlm$forecasts,col="blue")
points(test$jams_delay, fore.dlm2$forecasts,col="orange")
lines(test$jams_delay, fore.dlm2$forecasts,col="orange")
points(test$jams_delay, fore.ardl$forecasts,col="green")
lines(test$jams_delay, fore.ardl$forecasts,col="green")
legend("topleft",c("aktual", "koyck","DLM 1","DLM 2", "autoregressive"), lty=1, col=c("black","red","blue","orange","green"), cex=0.8)
